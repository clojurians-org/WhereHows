{
  "type" : "record",
  "name" : "MetadataChangeEvent",
  "namespace" : "com.linkedin.pegasus2avro.mxe",
  "doc" : "Kafka event for proposing a metadata change for an entity. A corresponding MetadataAuditEvent is emitted when the change is accepted and committed, otherwise a FailedMetadataChangeEvent will be emitted instead.",
  "fields" : [ {
    "name" : "auditHeader",
    "type" : [ "null", {
      "type" : "record",
      "name" : "KafkaAuditHeader",
      "namespace" : "com.linkedin.events",
      "doc" : "This header records information about the context of an event as it is emitted into kafka and is intended to be used by the kafka audit application.  For more information see go/kafkaauditheader",
      "fields" : [ {
        "name" : "time",
        "type" : "long",
        "doc" : "The time at which the event was emitted into kafka.",
        "compliance" : [ {
          "policy" : "EVENT_TIME"
        } ]
      }, {
        "name" : "server",
        "type" : "string",
        "doc" : "The fully qualified name of the host from which the event is being emitted.",
        "compliance" : "NONE"
      }, {
        "name" : "instance",
        "type" : [ "null", "string" ],
        "doc" : "The instance on the server from which the event is being emitted. e.g. i001",
        "default" : null,
        "compliance" : "NONE"
      }, {
        "name" : "appName",
        "type" : "string",
        "doc" : "The name of the application from which the event is being emitted. see go/appname",
        "compliance" : "NONE"
      }, {
        "name" : "messageId",
        "type" : {
          "type" : "fixed",
          "name" : "UUID",
          "size" : 16
        },
        "doc" : "A unique identifier for the message",
        "compliance" : "NONE"
      }, {
        "name" : "auditVersion",
        "type" : [ "null", "int" ],
        "doc" : "The version that is being used for auditing. In version 0, the audit trail buckets events into 10 minute audit windows based on the EventHeader timestamp. In version 1, the audit trail buckets events as follows: if the schema has an outer KafkaAuditHeader, use the outer audit header timestamp for bucketing; else if the EventHeader has an inner KafkaAuditHeader use that inner audit header's timestamp for bucketing",
        "default" : null,
        "compliance" : "NONE"
      }, {
        "name" : "fabricUrn",
        "type" : [ "null", "string" ],
        "doc" : "The fabricUrn of the host from which the event is being emitted. Fabric Urn in the format of urn:li:fabric:{fabric_name}. See go/fabric.",
        "default" : null,
        "compliance" : "NONE"
      }, {
        "name" : "clusterConnectionString",
        "type" : [ "null", "string" ],
        "doc" : "This is a String that the client uses to establish some kind of connection with the Kafka cluster. The exact format of it depends on specific versions of clients and brokers. This information could potentially identify the fabric and cluster with which the client is producing to or consuming from.",
        "default" : null,
        "compliance" : "NONE"
      } ]
    } ],
    "doc" : "Kafka audit header. See go/kafkaauditheader for more info.",
    "default" : null
  }, {
    "name" : "proposedSnapshot",
    "type" : [ {
      "type" : "record",
      "name" : "CorpUserSnapshot",
      "namespace" : "com.linkedin.pegasus2avro.metadata.snapshot",
      "doc" : "A metadata snapshot for a specific CorpUser entity.",
      "fields" : [ {
        "name" : "urn",
        "type" : "string",
        "doc" : "URN for the entity the metadata snapshot is associated with.",
        "java" : {
          "coercerClass" : "com.linkedin.pegasus2avro.common.urn.CorpuserUrnCoercer",
          "class" : "com.linkedin.pegasus2avro.common.urn.CorpuserUrn"
        }
      }, {
        "name" : "aspects",
        "type" : {
          "type" : "array",
          "items" : [ {
            "type" : "record",
            "name" : "CorpUserInfo",
            "namespace" : "com.linkedin.pegasus2avro.identity",
            "doc" : "Linkedin corp user information",
            "fields" : [ {
              "name" : "active",
              "type" : "boolean",
              "doc" : "Whether the corpUser is active, ref: https://iwww.corp.linkedin.com/wiki/cf/display/GTSD/Accessing+Active+Directory+via+LDAP+tools"
            }, {
              "name" : "displayName",
              "type" : [ "null", "string" ],
              "doc" : "displayName of this user ,  e.g.  Hang Zhang(DataHQ)",
              "default" : null
            }, {
              "name" : "email",
              "type" : "string",
              "doc" : "email address of this user"
            }, {
              "name" : "title",
              "type" : [ "null", "string" ],
              "doc" : "title of this user",
              "default" : null
            }, {
              "name" : "managerUrn",
              "type" : [ "null", "string" ],
              "doc" : "direct manager of this user",
              "default" : null,
              "java" : {
                "coercerClass" : "com.linkedin.pegasus2avro.common.urn.CorpuserUrnCoercer",
                "class" : "com.linkedin.pegasus2avro.common.urn.CorpuserUrn"
              }
            }, {
              "name" : "departmentId",
              "type" : [ "null", "long" ],
              "doc" : "department id this user belong to",
              "default" : null
            }, {
              "name" : "departmentName",
              "type" : [ "null", "string" ],
              "doc" : "department name this user belong to",
              "default" : null
            }, {
              "name" : "firstName",
              "type" : [ "null", "string" ],
              "doc" : "first name of this user",
              "default" : null
            }, {
              "name" : "lastName",
              "type" : [ "null", "string" ],
              "doc" : "last name of this user",
              "default" : null
            }, {
              "name" : "fullName",
              "type" : [ "null", "string" ],
              "doc" : "Common name of this user, format is firstName + lastName (split by a whitespace)",
              "default" : null
            }, {
              "name" : "countryCode",
              "type" : [ "null", "string" ],
              "doc" : "two uppercase letters country code. e.g.  US",
              "default" : null
            } ]
          }, {
            "type" : "record",
            "name" : "CorpUserEditableInfo",
            "namespace" : "com.linkedin.pegasus2avro.identity",
            "doc" : "Linkedin corp user information that can be edited from UI",
            "fields" : [ {
              "name" : "aboutMe",
              "type" : [ "null", "string" ],
              "doc" : "About me section of the user",
              "default" : null
            }, {
              "name" : "teams",
              "type" : {
                "type" : "array",
                "items" : "string"
              },
              "doc" : "Teams that the user belongs to e.g. Metadata",
              "default" : [ ]
            }, {
              "name" : "skills",
              "type" : {
                "type" : "array",
                "items" : "string"
              },
              "doc" : "Skills that the user possesses e.g. Machine Learning",
              "default" : [ ]
            }, {
              "name" : "pictureLink",
              "type" : "string",
              "doc" : "A URL which points to a picture which user wants to set as a profile photo",
              "default" : "https://raw.githubusercontent.com/linkedin/datahub/master/datahub-web/packages/data-portal/public/assets/images/default_avatar.png",
              "java" : {
                "coercerClass" : "com.linkedin.pegasus2avro.common.url.UrlCoercer",
                "class" : "com.linkedin.pegasus2avro.common.url.Url"
              }
            } ]
          } ]
        },
        "doc" : "The list of metadata aspects associated with the CorpUser. Depending on the use case, this can either be all, or a selection, of supported aspects."
      } ]
    }, {
      "type" : "record",
      "name" : "DatasetSnapshot",
      "namespace" : "com.linkedin.pegasus2avro.metadata.snapshot",
      "doc" : "A metadata snapshot for a specific dataset entity.",
      "fields" : [ {
        "name" : "urn",
        "type" : "string",
        "doc" : "URN for the entity the metadata snapshot is associated with.",
        "java" : {
          "coercerClass" : "com.linkedin.pegasus2avro.common.urn.DatasetUrnCoercer",
          "class" : "com.linkedin.pegasus2avro.common.urn.DatasetUrn"
        }
      }, {
        "name" : "aspects",
        "type" : {
          "type" : "array",
          "items" : [ {
            "type" : "record",
            "name" : "DatasetProperties",
            "namespace" : "com.linkedin.pegasus2avro.dataset",
            "doc" : "Properties associated with a Dataset",
            "fields" : [ {
              "name" : "description",
              "type" : [ "null", "string" ],
              "doc" : "Documentation of the dataset",
              "default" : null
            }, {
              "name" : "uri",
              "type" : [ "null", "string" ],
              "doc" : "The abstracted URI such as hdfs:///data/tracking/PageViewEvent, file:///dir/file_name. Uri should not include any environment specific properties. Some datasets might not have a standardized uri, which makes this field optional (i.e. kafka topic).",
              "default" : null,
              "java" : {
                "class" : "java.net.URI"
              }
            }, {
              "name" : "tags",
              "type" : {
                "type" : "array",
                "items" : "string"
              },
              "doc" : "tags for the dataset",
              "default" : [ ]
            }, {
              "name" : "customProperties",
              "type" : {
                "type" : "map",
                "values" : "string"
              },
              "doc" : "A key-value map to capture any other non-standardized properties for the dataset",
              "default" : { }
            } ]
          }, {
            "type" : "record",
            "name" : "DatasetDeprecation",
            "namespace" : "com.linkedin.pegasus2avro.dataset",
            "doc" : "Dataset deprecation status",
            "fields" : [ {
              "name" : "deprecated",
              "type" : "boolean",
              "doc" : "Whether the dataset is deprecated by owner."
            }, {
              "name" : "decommissionTime",
              "type" : [ "null", "long" ],
              "doc" : "The time user plan to decommission this dataset.",
              "default" : null
            }, {
              "name" : "note",
              "type" : "string",
              "doc" : "Additional information about the dataset deprecation plan, such as the wiki, doc, RB."
            }, {
              "name" : "actor",
              "type" : [ "null", "string" ],
              "doc" : "The corpuser URN which will be credited for modifying this deprecation content.",
              "default" : null,
              "java" : {
                "coercerClass" : "com.linkedin.pegasus2avro.common.urn.UrnCoercer",
                "class" : "com.linkedin.pegasus2avro.common.urn.Urn"
              }
            } ]
          }, {
            "type" : "record",
            "name" : "UpstreamLineage",
            "namespace" : "com.linkedin.pegasus2avro.dataset",
            "doc" : "Upstream lineage of a dataset",
            "fields" : [ {
              "name" : "upstreams",
              "type" : {
                "type" : "array",
                "items" : {
                  "type" : "record",
                  "name" : "Upstream",
                  "doc" : "Upstream lineage information about a dataset including the source reporting the lineage",
                  "fields" : [ {
                    "name" : "auditStamp",
                    "type" : {
                      "type" : "record",
                      "name" : "AuditStamp",
                      "namespace" : "com.linkedin.pegasus2avro.common",
                      "doc" : "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage.",
                      "fields" : [ {
                        "name" : "time",
                        "type" : "long",
                        "doc" : "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."
                      }, {
                        "name" : "actor",
                        "type" : "string",
                        "doc" : "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change.",
                        "java" : {
                          "coercerClass" : "com.linkedin.pegasus2avro.common.urn.UrnCoercer",
                          "class" : "com.linkedin.pegasus2avro.common.urn.Urn"
                        }
                      }, {
                        "name" : "impersonator",
                        "type" : [ "null", "string" ],
                        "doc" : "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor.",
                        "default" : null,
                        "java" : {
                          "coercerClass" : "com.linkedin.pegasus2avro.common.urn.UrnCoercer",
                          "class" : "com.linkedin.pegasus2avro.common.urn.Urn"
                        }
                      } ]
                    },
                    "doc" : "Audit stamp containing who reported the lineage and when"
                  }, {
                    "name" : "dataset",
                    "type" : "string",
                    "doc" : "The upstream dataset the lineage points to",
                    "java" : {
                      "coercerClass" : "com.linkedin.pegasus2avro.common.urn.DatasetUrnCoercer",
                      "class" : "com.linkedin.pegasus2avro.common.urn.DatasetUrn"
                    }
                  }, {
                    "name" : "type",
                    "type" : {
                      "type" : "enum",
                      "name" : "DatasetLineageType",
                      "doc" : "The various types of supported dataset lineage",
                      "symbols" : [ "COPY", "TRANSFORMED", "VIEW" ],
                      "symbolDocs" : {
                        "COPY" : "Direct copy without modification",
                        "TRANSFORMED" : "Transformed data with modification (format or content change)",
                        "VIEW" : "Represents a view defined on the sources e.g. Hive view defined on underlying hive tables or a Hive table pointing to a HDFS dataset or DALI view defined on multiple sources"
                      }
                    },
                    "doc" : "The type of the lineage"
                  } ]
                }
              },
              "doc" : "List of upstream dataset lineage information"
            } ]
          }, {
            "type" : "record",
            "name" : "InstitutionalMemory",
            "namespace" : "com.linkedin.pegasus2avro.common",
            "doc" : "Institutional memory of an entity. This is a way to link to relevant documentation and provide description of the documentation. Institutional or tribal knowledge is very important for users to leverage the entity.",
            "fields" : [ {
              "name" : "elements",
              "type" : {
                "type" : "array",
                "items" : {
                  "type" : "record",
                  "name" : "InstitutionalMemoryMetadata",
                  "doc" : "Metadata corresponding to a record of institutional memory.",
                  "fields" : [ {
                    "name" : "url",
                    "type" : "string",
                    "doc" : "Link to an engineering design document or a wiki page.",
                    "java" : {
                      "coercerClass" : "com.linkedin.pegasus2avro.common.url.UrlCoercer",
                      "class" : "com.linkedin.pegasus2avro.common.url.Url"
                    }
                  }, {
                    "name" : "description",
                    "type" : "string",
                    "doc" : "Description of the link."
                  }, {
                    "name" : "createStamp",
                    "type" : "AuditStamp",
                    "doc" : "Audit stamp associated with creation of this record"
                  } ]
                }
              },
              "doc" : "List of records that represent institutional memory of an entity. Each record consists of a link, description, creator and timestamps associated with that record."
            } ]
          }, {
            "type" : "record",
            "name" : "Ownership",
            "namespace" : "com.linkedin.pegasus2avro.common",
            "doc" : "Ownership information of an entity.",
            "fields" : [ {
              "name" : "owners",
              "type" : {
                "type" : "array",
                "items" : {
                  "type" : "record",
                  "name" : "Owner",
                  "doc" : "Ownership information",
                  "fields" : [ {
                    "name" : "owner",
                    "type" : "string",
                    "doc" : "Owner URN, e.g. urn:li:corpuser:ldap, urn:li:corpGroup:group_name, and urn:li:multiProduct:mp_name",
                    "java" : {
                      "coercerClass" : "com.linkedin.pegasus2avro.common.urn.UrnCoercer",
                      "class" : "com.linkedin.pegasus2avro.common.urn.Urn"
                    }
                  }, {
                    "name" : "type",
                    "type" : {
                      "type" : "enum",
                      "name" : "OwnershipType",
                      "doc" : "Owner category or owner role",
                      "symbols" : [ "DEVELOPER", "DATAOWNER", "DELEGATE", "PRODUCER", "CONSUMER", "STAKEHOLDER" ],
                      "symbolDocs" : {
                        "DEVELOPER" : "A person or group that is in charge of developing the code",
                        "DATAOWNER" : "A person or group that is owning the data",
                        "DELEGATE" : "A person or a group that overseas the operation, e.g. a DBA or SRE.",
                        "PRODUCER" : "A person, group, or service that produces/generates the data",
                        "CONSUMER" : "A person, group, or service that consumes the data",
                        "STAKEHOLDER" : "A person or a group that has direct business interest"
                      }
                    },
                    "doc" : "The type of the ownership"
                  }, {
                    "name" : "source",
                    "type" : [ "null", {
                      "type" : "record",
                      "name" : "OwnershipSource",
                      "doc" : "Source/provider of the ownership information",
                      "fields" : [ {
                        "name" : "type",
                        "type" : {
                          "type" : "enum",
                          "name" : "OwnershipSourceType",
                          "symbols" : [ "AUDIT", "DATABASE", "FILE_SYSTEM", "ISSUE_TRACKING_SYSTEM", "MANUAL", "SERVICE", "SOURCE_CONTROL", "OTHER" ],
                          "symbolDocs" : {
                            "AUDIT" : "Auditing system or audit logs",
                            "DATABASE" : "Database, e.g. GRANTS table",
                            "FILE_SYSTEM" : "File system, e.g. file/directory owner",
                            "ISSUE_TRACKING_SYSTEM" : "Issue tracking system, e.g. Jira",
                            "MANUAL" : "Manually provided by a user",
                            "SERVICE" : "Other ownership-like service, e.g. Nuage, ACL service etc",
                            "SOURCE_CONTROL" : "SCM system, e.g. GIT, SVN",
                            "OTHER" : "Other sources"
                          }
                        },
                        "doc" : "The type of the source"
                      }, {
                        "name" : "url",
                        "type" : [ "null", "string" ],
                        "doc" : "A reference URL for the source",
                        "default" : null
                      } ]
                    } ],
                    "doc" : "Source information for the ownership",
                    "default" : null
                  } ]
                }
              },
              "doc" : "List of owners of the entity."
            }, {
              "name" : "lastModified",
              "type" : "AuditStamp",
              "doc" : "Audit stamp containing who last modified the record and when."
            } ]
          }, {
            "type" : "record",
            "name" : "Status",
            "namespace" : "com.linkedin.pegasus2avro.common",
            "doc" : "The status metadata of an entity, e.g. dataset, metric, feature, etc.",
            "fields" : [ {
              "name" : "removed",
              "type" : "boolean",
              "doc" : "whether the entity is removed or not",
              "default" : false
            } ]
          }, {
            "type" : "record",
            "name" : "SchemaMetadata",
            "namespace" : "com.linkedin.pegasus2avro.schema",
            "doc" : "SchemaMetadata to describe metadata related to store schema",
            "fields" : [ {
              "name" : "schemaName",
              "type" : "string",
              "doc" : "Schema name e.g. PageViewEvent, identity.Profile, ams.account_management_tracking",
              "validate" : {
                "strlen" : {
                  "min" : 1,
                  "max" : 500
                }
              }
            }, {
              "name" : "platform",
              "type" : "string",
              "doc" : "Standardized platform urn where schema is defined. The data platform Urn (urn:li:platform:{platform_name})",
              "java" : {
                "coercerClass" : "com.linkedin.pegasus2avro.common.urn.DataPlatformUrnCoercer",
                "class" : "com.linkedin.pegasus2avro.common.urn.DataPlatformUrn"
              }
            }, {
              "name" : "version",
              "type" : "long",
              "doc" : "Every change to SchemaMetadata in the resource results in a new version. Version is server assigned. This version is differ from platform native schema version."
            }, {
              "name" : "created",
              "type" : "com.linkedin.pegasus2avro.common.AuditStamp",
              "doc" : "An AuditStamp corresponding to the creation of this resource/association/sub-resource"
            }, {
              "name" : "lastModified",
              "type" : "com.linkedin.pegasus2avro.common.AuditStamp",
              "doc" : "An AuditStamp corresponding to the last modification of this resource/association/sub-resource. If no modification has happened since creation, lastModified should be the same as created"
            }, {
              "name" : "deleted",
              "type" : [ "null", "com.linkedin.pegasus2avro.common.AuditStamp" ],
              "doc" : "An AuditStamp corresponding to the deletion of this resource/association/sub-resource. Logically, deleted MUST have a later timestamp than creation. It may or may not have the same time as lastModified depending upon the resource/association/sub-resource semantics.",
              "default" : null
            }, {
              "name" : "dataset",
              "type" : [ "null", "string" ],
              "doc" : "Dataset this schema metadata is associated with.",
              "default" : null,
              "java" : {
                "coercerClass" : "com.linkedin.pegasus2avro.common.urn.DatasetUrnCoercer",
                "class" : "com.linkedin.pegasus2avro.common.urn.DatasetUrn"
              }
            }, {
              "name" : "cluster",
              "type" : [ "null", "string" ],
              "doc" : "The cluster this schema metadata resides from",
              "default" : null
            }, {
              "name" : "hash",
              "type" : "string",
              "doc" : "the SHA1 hash of the schema content"
            }, {
              "name" : "platformSchema",
              "type" : [ {
                "type" : "record",
                "name" : "EspressoSchema",
                "doc" : "Schema text of an espresso table schema.",
                "fields" : [ {
                  "name" : "documentSchema",
                  "type" : "string",
                  "doc" : "The native espresso document schema."
                }, {
                  "name" : "tableSchema",
                  "type" : "string",
                  "doc" : "The espresso table schema definition."
                } ]
              }, {
                "type" : "record",
                "name" : "OracleDDL",
                "doc" : "Schema holder for oracle data definition language that describes an oracle table.",
                "fields" : [ {
                  "name" : "tableSchema",
                  "type" : "string",
                  "doc" : "The native schema in the dataset's platform. This is a human readable (json blob) table schema."
                } ]
              }, {
                "type" : "record",
                "name" : "MySqlDDL",
                "doc" : "Schema holder for MySql data definition language that describes an MySql table.",
                "fields" : [ {
                  "name" : "tableSchema",
                  "type" : "string",
                  "doc" : "The native schema in the dataset's platform. This is a human readable (json blob) table schema."
                } ]
              }, {
                "type" : "record",
                "name" : "PrestoDDL",
                "doc" : "Schema holder for presto data definition language that describes a presto view.",
                "fields" : [ {
                  "name" : "rawSchema",
                  "type" : "string",
                  "doc" : "The raw schema in the dataset's platform. This includes the DDL and the columns extracted from DDL."
                } ]
              }, {
                "type" : "record",
                "name" : "KafkaSchema",
                "doc" : "Schema holder for kafka schema.",
                "fields" : [ {
                  "name" : "documentSchema",
                  "type" : "string",
                  "doc" : "The native kafka document schema. This is a human readable avro document schema."
                } ]
              }, {
                "type" : "record",
                "name" : "BinaryJsonSchema",
                "doc" : "Schema text of binary JSON schema.",
                "fields" : [ {
                  "name" : "schema",
                  "type" : "string",
                  "doc" : "The native schema text for binary JSON file format."
                } ]
              }, {
                "type" : "record",
                "name" : "OrcSchema",
                "doc" : "Schema text of an ORC schema.",
                "fields" : [ {
                  "name" : "schema",
                  "type" : "string",
                  "doc" : "The native schema for ORC file format."
                } ]
              }, {
                "type" : "record",
                "name" : "Schemaless",
                "doc" : "The dataset has no specific schema associated with it",
                "fields" : [ ]
              }, {
                "type" : "record",
                "name" : "KeyValueSchema",
                "doc" : "Schema text of a key-value store schema.",
                "fields" : [ {
                  "name" : "keySchema",
                  "type" : "string",
                  "doc" : "The raw schema for the key in the key-value store."
                }, {
                  "name" : "valueSchema",
                  "type" : "string",
                  "doc" : "The raw schema for the value in the key-value store."
                } ]
              }, {
                "type" : "record",
                "name" : "OtherSchema",
                "doc" : "Schema holder for undefined schema types.",
                "fields" : [ {
                  "name" : "rawSchema",
                  "type" : "string",
                  "doc" : "The native schema in the dataset's platform."
                } ]
              } ],
              "doc" : "The native schema in the dataset's platform."
            }, {
              "name" : "fields",
              "type" : {
                "type" : "array",
                "items" : {
                  "type" : "record",
                  "name" : "SchemaField",
                  "doc" : "SchemaField to describe metadata related to dataset schema. Schema normalization rules: http://go/tms-schema",
                  "fields" : [ {
                    "name" : "fieldPath",
                    "type" : "string",
                    "doc" : "Flattened name of the field. Field is computed from jsonPath field. For data translation rules refer to wiki page above."
                  }, {
                    "name" : "jsonPath",
                    "type" : [ "null", "string" ],
                    "doc" : "Flattened name of a field in JSON Path notation.",
                    "default" : null
                  }, {
                    "name" : "nullable",
                    "type" : "boolean",
                    "doc" : "Indicates if this field is optional or nullable",
                    "default" : false
                  }, {
                    "name" : "description",
                    "type" : [ "null", "string" ],
                    "doc" : "Description",
                    "default" : null
                  }, {
                    "name" : "type",
                    "type" : {
                      "type" : "record",
                      "name" : "SchemaFieldDataType",
                      "doc" : "Schema field data types",
                      "fields" : [ {
                        "name" : "type",
                        "type" : [ {
                          "type" : "record",
                          "name" : "BooleanType",
                          "doc" : "Boolean field type.",
                          "fields" : [ ]
                        }, {
                          "type" : "record",
                          "name" : "FixedType",
                          "doc" : "Fixed field type.",
                          "fields" : [ ]
                        }, {
                          "type" : "record",
                          "name" : "StringType",
                          "doc" : "String field type.",
                          "fields" : [ ]
                        }, {
                          "type" : "record",
                          "name" : "BytesType",
                          "doc" : "Bytes field type.",
                          "fields" : [ ]
                        }, {
                          "type" : "record",
                          "name" : "NumberType",
                          "doc" : "Number data type: long, integer, short, etc..",
                          "fields" : [ ]
                        }, {
                          "type" : "record",
                          "name" : "EnumType",
                          "doc" : "Enum field type.",
                          "fields" : [ ]
                        }, {
                          "type" : "record",
                          "name" : "NullType",
                          "doc" : "Null field type.",
                          "fields" : [ ]
                        }, {
                          "type" : "record",
                          "name" : "MapType",
                          "doc" : "Map field type.",
                          "fields" : [ {
                            "name" : "keyType",
                            "type" : [ "null", "string" ],
                            "doc" : "Key type in a map",
                            "default" : null
                          }, {
                            "name" : "valueType",
                            "type" : [ "null", "string" ],
                            "doc" : "Type of the value in a map",
                            "default" : null
                          } ]
                        }, {
                          "type" : "record",
                          "name" : "ArrayType",
                          "doc" : "Array field type.",
                          "fields" : [ {
                            "name" : "nestedType",
                            "type" : [ "null", {
                              "type" : "array",
                              "items" : "string"
                            } ],
                            "doc" : "List of types this array holds.",
                            "default" : null
                          } ]
                        }, {
                          "type" : "record",
                          "name" : "UnionType",
                          "doc" : "Union field type.",
                          "fields" : [ {
                            "name" : "nestedTypes",
                            "type" : [ "null", {
                              "type" : "array",
                              "items" : "string"
                            } ],
                            "doc" : "List of types in union type.",
                            "default" : null
                          } ]
                        }, {
                          "type" : "record",
                          "name" : "RecordType",
                          "doc" : "Record field type.",
                          "fields" : [ ]
                        } ],
                        "doc" : "Data platform specific types"
                      } ]
                    },
                    "doc" : "Platform independent field type of the field."
                  }, {
                    "name" : "nativeDataType",
                    "type" : "string",
                    "doc" : "The native type of the field in the dataset's platform as declared by platform schema."
                  }, {
                    "name" : "recursive",
                    "type" : "boolean",
                    "doc" : "There are use cases when a field in type B references type A. A field in A references field of type B. In such cases, we will mark the first field as recursive.",
                    "default" : false
                  } ]
                }
              },
              "doc" : "Client provided a list of fields from document schema."
            }, {
              "name" : "primaryKeys",
              "type" : [ "null", {
                "type" : "array",
                "items" : "string"
              } ],
              "doc" : "Client provided list of fields that define primary keys to access record. Field order defines hierarchical espresso keys. Empty lists indicates absence of primary key access patter. Value is a SchemaField@fieldPath.",
              "default" : null
            }, {
              "name" : "foreignKeysSpecs",
              "type" : [ "null", {
                "type" : "map",
                "values" : {
                  "type" : "record",
                  "name" : "ForeignKeySpec",
                  "doc" : "Description of a foreign key in a schema.",
                  "fields" : [ {
                    "name" : "foreignKey",
                    "type" : [ {
                      "type" : "record",
                      "name" : "DatasetFieldForeignKey",
                      "doc" : "For non-urn based foregin keys.",
                      "fields" : [ {
                        "name" : "parentDataset",
                        "type" : "string",
                        "doc" : "dataset that stores the resource.",
                        "java" : {
                          "coercerClass" : "com.linkedin.pegasus2avro.common.urn.DatasetUrnCoercer",
                          "class" : "com.linkedin.pegasus2avro.common.urn.DatasetUrn"
                        }
                      }, {
                        "name" : "currentFieldPaths",
                        "type" : {
                          "type" : "array",
                          "items" : "string"
                        },
                        "doc" : "List of fields in hosting(current) SchemaMetadata that conform a foreign key. List can contain a single entry or multiple entries if several entries in hosting schema conform a foreign key in a single parent dataset."
                      }, {
                        "name" : "parentField",
                        "type" : "string",
                        "doc" : "SchemaField@fieldPath that uniquely identify field in parent dataset that this field references."
                      } ]
                    }, {
                      "type" : "record",
                      "name" : "UrnForeignKey",
                      "doc" : "If SchemaMetadata fields make any external references and references are of type com.linkeidn.common.Urn or any children, this models can be used to mark it.",
                      "fields" : [ {
                        "name" : "currentFieldPath",
                        "type" : "string",
                        "doc" : "Field in hosting(current) SchemaMetadata."
                      } ]
                    } ],
                    "doc" : "Foreign key definition in metadata schema."
                  } ]
                }
              } ],
              "doc" : "Map captures all the references schema makes to external datasets. Map key is ForeignKeySpecName typeref.",
              "default" : null
            } ]
          } ]
        },
        "doc" : "The list of metadata aspects associated with the dataset. Depending on the use case, this can either be all, or a selection, of supported aspects."
      } ]
    } ],
    "doc" : "Snapshot of the proposed metadata change. Include only the aspects affected by the change in the snapshot."
  }, {
    "name" : "proposedDelta",
    "type" : [ "null" ],
    "doc" : "Delta of the proposed metadata partial update.",
    "default" : null
  } ]
}